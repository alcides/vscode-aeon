{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Aeon",
  "scopeName": "source.aeon",
  "fileTypes": [
    "ae"
  ],
  "patterns": [
    {
      "include": "#declarations"
    }
  ],
  "repository": {
    "declarations": {
      "patterns": [
        {
          "include": "#comments"
        },
        {
          "include": "#imports"
        },
        {
          "include": "#type-declarations"
        },
        {
          "include": "#function-declarations"
        },
        {
          "include": "#expressions"
        }
      ]
    },
    "expressions": {
      "patterns": [
        {
          "include": "#literals"
        },
        {
          "include": "#keywords"
        },
        {
          "include": "#operators"
        },
        {
          "include": "#function-calls"
        },
        {
          "include": "#type-references"
        },
        {
          "include": "#identifiers"
        }
      ]
    },
    "identifiers": {
      "patterns": [
        {
          "match": "\\b[a-z][a-zA-Z0-9_]*\\b",
          "name": "variable.other.aeon"
        },
        {
          "match": "\\b[A-Z][a-zA-Z0-9_]*\\b",
          "name": "entity.name.type.aeon"
        }
      ]
    },
    "comments": {
      "patterns": [
        {
          "name": "comment.line.number-sign.aeon",
          "match": "#.*$"
        }
      ]
    },
    "literals": {
      "patterns": [
        {
          "include": "#string-literals"
        },
        {
          "include": "#numeric-literals"
        },
        {
          "include": "#boolean-literals"
        }
      ]
    },
    "string-literals": {
      "name": "string.quoted.double.aeon",
      "begin": "\"",
      "end": "\"",
      "patterns": [
        {
          "name": "constant.character.escape.aeon",
          "match": "\\\\."
        }
      ]
    },
    "numeric-literals": {
      "patterns": [
        {
          "name": "constant.numeric.float.aeon",
          "match": "\\b\\d+\\.\\d+\\b"
        },
        {
          "name": "constant.numeric.integer.aeon",
          "match": "\\b\\d+\\b"
        }
      ]
    },
    "boolean-literals": {
      "patterns": [
        {
          "name": "constant.language.boolean.aeon",
          "match": "\\b(true|false)\\b"
        }
      ]
    },
    "function-declarations": {
      "patterns": [
        {
          "include": "#native-functions"
        },
        {
          "include": "#lambda-functions"
        },
        {
          "include": "#kind-functions"
        },
        {
          "include": "#standard-functions"
        }
      ]
    },
    "native-functions": {
      "patterns": [
        {
          "name": "meta.function.native.aeon",
          "begin": "(native)\\s+\"",
          "end": "\"",
          "captures": {
            "1": {
              "name": "keyword.other.native.aeon"
            }
          },
          "contentName": "source.python",
          "patterns": [
            {
              "include": "source.python"
            }
          ]
        },
        {
          "name": "meta.import.native.aeon",
          "begin": "(native_import)\\s+\"",
          "end": "\"",
          "beginCaptures": {
            "1": {
              "name": "keyword.other.import.native.aeon"
            }
          },
          "contentName": "string.quoted.module.python"
        }
      ]
    },
    "lambda-functions": {
      "patterns": [
        {
          "match": "(\\\\)\\s*([a-zA-Z0-9_]+)",
          "captures": {
            "1": {
              "name": "keyword.operator.lambda.aeon"
            },
            "2": {
              "name": "variable.parameter.lambda.aeon"
            }
          }
        }
      ]
    },
    "kind-functions": {
      "patterns": [
        {
          "match": "(Î›)\\s*([a-z][a-zA-Z0-9_]*)",
          "captures": {
            "1": {
              "name": "keyword.operator.kind.lambda.aeon"
            },
            "2": {
              "name": "variable.parameter.kind.aeon"
            }
          }
        }
      ]
    },
    "standard-functions": {
      "patterns": [
        {
          "match": "\\b(def)\\s+([a-zA-Z0-9_]+)\\b",
          "captures": {
            "1": {
              "name": "keyword.declaration.function.aeon"
            },
            "2": {
              "name": "entity.name.function.aeon"
            }
          }
        }
      ]
    },
    "function-calls": {
      "match": "\\b[a-z][a-zA-Z0-9_]*\\b",
      "name": "entity.name.function.aeon"
    },
    "type-declarations": {
      "patterns": [
        {
          "match": "\\b(type)\\s+([A-Z][a-zA-Z0-9_]*)\\b",
          "captures": {
            "1": {
              "name": "keyword.declaration.type.aeon"
            },
            "2": {
              "name": "entity.name.type.aeon"
            }
          }
        }
      ]
    },
    "type-references": {
      "patterns": [
        {
          "name": "storage.type.built-in.aeon",
          "match": "\\b(Unit|Int|Float|String|Bool)\\b"
        }
      ]
    },
    "imports": {
      "patterns": [
        {
          "match": "^(import)\\s+(.+?)\\s+from\\s+\"(.+)\"",
          "captures": {
            "1": {
              "name": "keyword.control.import.aeon"
            },
            "2": {
              "name": "entity.name.function.imported.aeon"
            },
            "3": {
              "name": "string.quoted.module.aeon"
            }
          }
        },
        {
          "match": "^(import)\\s+\"(.+)\"",
          "captures": {
            "1": {
              "name": "keyword.control.import.aeon"
            },
            "2": {
              "name": "string.quoted.module.aeon"
            }
          }
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "match": "\\b(let)\\s+([a-zA-Z0-9_]+)\\b",
          "captures": {
            "1": {
              "name": "keyword.declaration.let.aeon"
            },
            "2": {
              "name": "variable.other.declaration.aeon"
            }
          }
        },
        {
          "match": "\\b(@)([a-zA-Z0-9_]+)\\b",
          "captures": {
            "1": {
              "name": "keyword.decorator.aeon"
            },
            "2": {
              "name": "entity.name.decorator.aeon"
            }
          }
        },
        {
          "match": "\\b(forall)\\s+([a-zA-Z0-9_]+)\\b",
          "captures": {
            "1": {
              "name": "keyword.other.quantifier.aeon"
            },
            "2": {
              "name": "entity.name.type.parameter.aeon"
            }
          }
        },
        {
          "name": "keyword.control.aeon",
          "match": "\\b(where|in|if|then|else)\\b"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.arrow.function.aeon",
          "match": "->"
        },
        {
          "name": "keyword.operator.arrow.kind.aeon",
          "match": "=>"
        },
        {
          "name": "keyword.operator.assignment.aeon",
          "match": "="
        },
        {
          "name": "punctuation.separator.type.aeon",
          "match": ":"
        },
        {
          "name": "keyword.operator.logical.aeon",
          "match": "(\\|\\||&&|!)"
        },
        {
          "name": "keyword.operator.comparison.aeon",
          "match": "(==|>=|<=|!=|>|<|-->)"
        },
        {
          "name": "keyword.operator.arithmetic.integer.aeon",
          "match": "(\\+|-|\\*|/|%)"
        },
        {
          "name": "keyword.operator.arithmetic.float.aeon",
          "match": "(\\+|-|\\*|/|%)."
        },
        {
          "name": "punctuation.terminator.statement.aeon",
          "match": ";"
        },
        {
          "name": "keyword.operator.pipe.aeon",
          "match": "\\b(where|\\|)\\b"
        }
      ]
    }
  }
}
